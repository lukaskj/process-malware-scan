export const REPORT_HTML = `<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Malware Scan Report</title>
  <script src="https://unpkg.com/alpinejs" defer></script>
  <script type="application/json" id="report-json">
    ||-JSON-||
  </script>
  <script type="text/javascript">
    const resultContents = JSON.parse(document.getElementById("report-json")?.textContent || "{}");
    const reportObject = organizeObject(resultContents);
    window.reportObject = reportObject;

    function organizeObject(resultContents) {
      const data = {};
      const sources = {};

      for (const executable of resultContents.all) {
        if (!(executable.source in data)) {
          data[executable.source] = [];
          sources[executable.source] = { name: executable.source, hidden: true, malicious: 0, total: 0 };
        }
        executable.results = resultContents.status[executable.hash] ?? null;
        if (executable.path && executable.path.trim().length) {
          executable.minPath = executable.path.substr(executable.path.lastIndexOf(String.fromCharCode(92)) + 1);
        }

        data[executable.source].push(executable);
        sources[executable.source].total++;
        if (executable.results && executable.results.status === "Malicious") sources[executable.source].malicious++;
      }

      sortData(data);

      return { data, sources };
    }

    function sortData(data) {
      for (const source in data) {
        data[source].sort((a, b) => {
          if (a.results && !b.results) return -1;
          if (!a.results && b.results) return 1;
          return a.results?.positives < b.results?.positives ? 1 : -1
        });
      }
    }
  </script>
</head>

<body x-data="reportObject">
  <template x-for="(source, index) in sources">
    <div>
      <div class="source-title">
        <span x-text="source.name" class="source-name"></span>
        <span x-text="'('+source.malicious + '/' + source.total+')'" class="source-detections" :class="source.malicious > 0 ? 'source-detections-mal' : ''"></span>
        <button @click="source.hidden = !source.hidden" x-text="source.hidden ? '+' : '-' "></button>
      </div>
      <table x-show="!source.hidden" class="table">
        <tr>
          <th>Name</th>
          <th>Exe</th>
          <th>Result</th>
          <th>Detections</th>
          <th>Type</th>
          <th></th>
          <th></th>
        </tr>
        <template x-for="(exe, i2) in data[source.name]" :key="i2">
          <tr :class="exe.results?.status ? 'exe-' + exe.results?.status.toLowerCase().replace(' ', '') : ''">
            <td x-text="exe.name" :title="exe.name" class="td-name"></td>
            <td class="td-path">
              <div x-text="exe.minPath" :title="exe.path + ' ' + (exe.args || '')"></div>
              <div x-show="exe.detailsOpen">
                <div class="mt-5">--</div>
                <div x-text="exe.path + ' ' + (exe.args || '')"></div>
                <div x-text="exe.hash" class="mt-5"></div>
                <template x-if="exe.results?.status === 'Error'">
                  <div class="mt-5">
                    Error: <span x-text="exe.results?.errorMessage || ''"></span>
                  </div>
                </template>
              </div>
            </td>
            <td>
              <span x-text="exe.results?.status || ''"></span>
              <template x-if="exe.results?.status === 'Error'">
                <a href="#" :title="exe.results?.errorMessage || ''">(?)</a>
              </template>
            </td>
            <td x-text="exe.results ? exe.results.positives + '/' + exe.results.total : ''" class="text-center" :class="{bold: exe.results && exe.results.positives > 0}"></td>
            <td x-text="exe.source"></td>
            <td class="text-center">
              <a x-show="exe.hash && exe.results" :href="'https://www.virustotal.com/gui/file/'+exe.hash" target="_blank">VirusTotal</a>
            </td>
            <td class="text-center align-top">
              <button x-show="exe.results" @click="exe.detailsOpen = !exe.detailsOpen">Details</button>
            </td>
          </tr>
        </template>
      </table>
    </div>
  </template>

  <style>
    :root {
      --color-malicious: #ffcdd2;
      --color-notmalicious: #e8f5e9;
      --color-error: #fff9c4;
    }

    * {
      font-family: Verdana;
    }

    body {
      background-color: #E7E9EB;
    }

    .source-title {
      margin-top: 15px;
      margin-bottom: 7px;
      position: relative;
      font-weight: bold;
    }

    .source-title button {
      width: 27px;
      height: 19px;
      line-height: 0;
      position: absolute;
      margin-top: 0;
    }

    .source-detections {
      margin: 0 10px 0 5px;
    }

    .source-detections-mal {
      color: #b71c1c;
    }

    .td-name {
      max-width: 250px;
      overflow: hidden;
      text-overflow: ellipsis;
    }

    .td-path {
      width: 50%;
    }

    td a {
      text-decoration: none;
      color: #0d47a1;
    }

    .exe-malicious td {
      background-color: var(--color-malicious) !important;
    }

    .exe-notmalicious td {
      background-color: var(--color-notmalicious);
    }

    .exe-error td {
      background-color: var(--color-error) !important;
    }

    .table {
      width: 100%;
      border: solid 1px #cdcdcd;
      border-collapse: collapse;
      border-spacing: 0;
      font: normal 13px Arial, sans-serif;
    }

    .table th {
      background-color: #cecece;
      border: solid 1px #cdcdcd;
      color: #0f0f0f;
      padding: 5px;
      text-align: left;
    }

    .table td {
      background-color: #f0f0f0;
      border: solid 1px #cdcdcd;
      color: #333;
      padding: 5px;
      vertical-align: top;
    }

    .text-center {
      text-align: center;
    }

    .align-top {
      vertical-align: top;
    }

    td button {
      padding: 0;
    }

    /****/
    .mt-5 {
      margin-top: 5px;
    }

    .bold {
      font-weight: bold;
    }
  </style>
</body>

</html>
`;
// yeah lol
export const FLAG_REPLACE = "||-JSON-||";
