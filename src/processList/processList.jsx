import React from 'react'
import { connect } from 'react-redux'
import { bindActionCreators } from 'redux'
import { getProcessList } from './processListActions'
import { onSearch } from '../layout/searchReducer'


class ProcessList extends React.Component {
   constructor(props) {
      super(props)
      this.state = { list: [] }
   }

   componentWillMount() {
      // this.setCurrentList([])
      this.props.getProcessList()
   }

   render() {
      return (
         <div>
            <nav className="navbar sticky-top navbar-expand-lg navbar-dark bg-dark justify-content-between">
               {/* <a className="navbar-brand" href="#">Filter</a> */}
               <button className="btn btn-outline-info mr-sm-2"><i className="fa fa-cloud-upload"></i> Check all <i className="fa fa-user-md"></i></button>
               <button className="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarNavAltMarkup" aria-controls="navbarNavAltMarkup" aria-expanded="false" aria-label="Toggle navigation">
                  <span className="navbar-toggler-icon"></span>
               </button>
               {/* <div className="collapse navbar-collapse" id="navbarNavAltMarkup">
                  <div className="navbar-nav">
                     <a className="nav-item nav-link active" href="#">Home <span className="sr-only">(current)</span></a>
                     <a className="nav-item nav-link" href="#">Features</a>
                     <a className="nav-item nav-link" href="#">Pricing</a>
                     <a className="nav-item nav-link disabled" href="#">Disabled</a>
                  </div>
               </div> */}
               <div className="form-inline my-2 my-lg-0">
                  <button disabled className="btn btn-outline-default mr-sm-2" onClick={this.props.getProcessList}><i className="fa fa-refresh"></i> Refresh</button>
                  <input className="form-control mr-sm-2" type="search" placeholder="Search" aria-label="Search" value={this.props.searchText} onChange={(e) => this.props.onSearch(e.target.value)} />
               </div>
            </nav>
            <table className="table table-bordered">
               <thead>
                  <tr>
                     <th scope="col">Process (Total: {this.props.processList.list.length}) (Total running: {this.props.processList.list.filter(p => p.running).length})</th>
                     <th scope="col" style={{width: '10px'}}>Running</th>
                     <th scope="col" style={{width: '10px'}}>Actions</th>
                  </tr>
               </thead>
               <tbody>
                  {this.props.processList.list.map(p => {
                        if (!this.props.searchText || p.filename.toLowerCase().indexOf(this.props.searchText.toLowerCase()) >= 0)
                        return (
                           <tr key={p.hash}>
                              <td scope="col" key={p.hash} className="align-middle">{p.filename}</td> 
                              <td style={{fontSize: '2em', padding: 0}} className="text-center"><i className={`fa ${p.running ? 'fa-check-circle' : 'fa-times-circle'}`}></i></td>
                              <td style={{}} className="text-center"><button className="btn btn-primary btn-sm">Results</button></td>
                           </tr>
                        )
                     }
                  )}
               </tbody>
            </table>
         </div>
      )
   }
}

const mapStateToProps = globalState => ({
   searchText: globalState.search.text,
   processList: globalState.processList
})

const mapActionsToProps = dispatch => bindActionCreators({ getProcessList, onSearch }, dispatch)

export default connect(mapStateToProps, mapActionsToProps)(ProcessList)