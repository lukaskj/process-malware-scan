import { getPathAndArgs } from "../get-path-and-args";

describe("Utils", () => {
  describe("getPathAndArgs", () => {
    describe("Dashed args", () => {
      it("should return path and args when the str has path and args", () => {
        // given
        const path = "C:\\WINDOWS\\system32\\svchost.exe";
        const args = "-k WepHostSvcGroup -6 -o c:\\test";
        const input = `${path} ${args}`;

        // when
        const result = getPathAndArgs(input);

        // then
        expect(result.path).toBe(path);
        expect(result.args).toBe(args);
      });

      it("should return path and empty args when the str has path and no args", () => {
        // given
        const path = "C:\\WINDOWS\\system32\\svchost.exe";
        const args = "";
        const input = `${path} ${args}`;

        // when
        const result = getPathAndArgs(input);

        // then
        expect(result.path).toBe(path);
        expect(result.args).toBe(args);
      });
    });

    describe("Slashed args", () => {
      it("should return path and args when the str has path and args", () => {
        // given
        const path = "C:\\WINDOWS\\system32\\svchost.exe";
        const args = "/k WepHostSvcGroup /6 /o c:\\test";
        const input = `${path} ${args}`;

        // when
        const result = getPathAndArgs(input);

        // then
        expect(result.path).toBe(path);
        expect(result.args).toBe(args);
      });
    });

    describe("Mixed args", () => {
      it("should return path and args when the str has path with mixed args starting with dash", () => {
        // given
        const path = "C:\\WINDOWS\\system32\\svchost.exe";
        const args = "-k WepHostSvcGroup /6 -o c:\\test";
        const input = `${path} ${args}`;

        // when
        const result = getPathAndArgs(input);

        // then
        expect(result.path).toBe(path);
        expect(result.args).toBe(args);
      });

      it("should return path and args when the str has path with mixed args starting with slash", () => {
        // given
        const path = "C:\\WINDOWS\\system32\\svchost.exe";
        const args = "/k WepHostSvcGroup -6 -o c:\\test";
        const input = `${path} ${args}`;

        // when
        const result = getPathAndArgs(input);

        // then
        expect(result.path).toBe(path);
        expect(result.args).toBe(args);
      });
    });

    describe("Other", () => {
      it("should return correct path when there is no args or spaces after", () => {
        // given
        const path = "C:\\WINDOWS\\system32\\svchost.exe";
        const input = `${path}`;

        // when
        const result = getPathAndArgs(input);

        // then
        expect(result.path).toBe(path);
        expect(result.args).toBe("");
      });

      it("should return correct path when path is double quoted", () => {
        // given
        const path = '"C:\\Program Files\\Everything\\Everything.exe"';
        const args = "-svc";
        const expectedPath = path.replaceAll('"', "");
        const input = `${path} ${args}`;

        // when
        const result = getPathAndArgs(input);

        // then
        expect(result.path).toBe(expectedPath);
        expect(result.args).toBe(args);
      });

      it("should return correct path when path is single quoted", () => {
        // given
        const path = "'C:\\WINDOWS\\system32\\svch-ost.exe'";
        const expectedPath = path.replaceAll("'", "");
        const input = `${path}`;

        // when
        const result = getPathAndArgs(input);

        // then
        expect(result.path).toBe(expectedPath);
        expect(result.args).toBe("");
      });

      it("should return correct path when args separator is in the middle of the path", () => {
        // given
        const path = "C:\\WINDOWS\\system32\\svc-host.exe";
        const input = `${path}`;

        // when
        const result = getPathAndArgs(input);

        // then
        expect(result.path).toBe(path);
        expect(result.args).toBe("");
      });
    });
  });
});
