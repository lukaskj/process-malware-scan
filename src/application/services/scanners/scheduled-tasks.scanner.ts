import { Executable } from "@domain/entities/executable.entity";
import { ExecutableSource } from "@domain/enum/executable-source.enum";
import { IExecutable } from "@domain/interfaces/executable.interface";
import { Service } from "typedi";
import { Powershell } from "../../utils/powershell";
import { IScanner } from "./scanner.interface";

@Service()
export class ScheduledTasksScanner implements IScanner {
  public name: string = "Scheduled Tasks";
  public optionName: string = "task";
  public source = ExecutableSource.SCHEDULED_TASK;

  constructor(private shell: Powershell) {}

  public async listExecutables(): Promise<IExecutable[]> {
    console.log("Listing scheduled tasks...");
    const output = await this.shell.run(["(Get-ScheduledTask).Actions"]);
    const outputArr = output.split("\n");

    const executables: Executable[] = [];
    const executableRegex = /:\s(.+)/g;

    for (let i = 0; i < outputArr.length; i++) {
      const line = outputArr[i];
      if (!line.startsWith("Execute")) {
        continue;
      }
      const match = line.match(executableRegex);
      if (!match || !match.length) {
        continue;
      }
      const path = match[0].substring(2).replaceAll('"', "");
      executables.push(new Executable("Scheduled Task", path, ExecutableSource.SCHEDULED_TASK, ""));
    }

    return executables;
  }
}
