import { createHash } from "node:crypto";
import { createReadStream, existsSync } from "node:fs";
import { readFile } from "node:fs/promises";
import { Service } from "typedi";

@Service()
export class ExecutableService {
  public async sha256(filePath: string): Promise<string> {
    if (!existsSync(filePath)) {
      throw new Error(`File ${filePath} not found.`);
    }

    const buff = await readFile(filePath);
    const hash = createHash("sha256").update(buff).digest("hex");
    return hash;
  }

  public async sha256Stream(filePath: string): Promise<string> {
    return new Promise((res, reject) => {
      // if (!existsSync(filePath)) {
      //   reject(`File ${filePath} not found.`);
      // }
      const hash = createHash("sha256").setEncoding("hex");
      const stream = createReadStream(filePath);

      stream
        .once("error", reject)
        .pipe(hash)
        .once("finish", () => {
          res(hash.read());
        });
    });
  }
}
