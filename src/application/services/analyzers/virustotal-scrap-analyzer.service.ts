import { isNullOrUndefined } from "@application/utils/is-null-or-undefined";
import { IAnalyzer } from "@domain/interfaces/analyzer.interface";
import { HashAnalyzeStatus, IOutputExecutableStatus } from "@domain/interfaces/output-executable-status.interface";
import { Browser, BrowserContext, chromium } from "playwright";
import { Service } from "typedi";
import { ConfigService } from "../config.service";

const INT_REGEX = /[^0-9]+/g;

@Service()
export class VirusTotalScrapAnalyzerService implements IAnalyzer {
  private baseUrl: string = "https://www.virustotal.com/gui/file/";
  private static __browser: Promise<Browser> | null = null;
  private context: BrowserContext | null = null;

  constructor(private configService: ConfigService) {}

  private async getBrowser(): Promise<Browser> {
    if (isNullOrUndefined(VirusTotalScrapAnalyzerService.__browser)) {
      VirusTotalScrapAnalyzerService.__browser = chromium.launch({
        headless: !this.configService.isDev(),
      });
    }

    return VirusTotalScrapAnalyzerService.__browser;
  }

  private async getContext(): Promise<BrowserContext> {
    if (isNullOrUndefined(this.context)) {
      const browser = await this.getBrowser();
      this.context = await browser.newContext();
    }

    return this.context;
  }

  public async analyzeHash(hash: string): Promise<IOutputExecutableStatus> {
    const url = `${this.baseUrl}${hash}`;

    const context = await this.getContext();
    const page = await context.newPage();

    await page.goto(url);
    const hashWasScanned = await page.isVisible(".circle .positives");
    const hashNotFound = await page.isVisible("img[src='images/error-item-not-found.png']");

    console.log({ hashWasScanned, hashNotFound });

    if (hashNotFound) {
      return {
        hash,
        positives: -1,
        total: -1,
        status: HashAnalyzeStatus.NOT_FOUND,
      };
    }

    if (!hashWasScanned) {
      return {
        hash,
        positives: -1,
        total: -1,
        status: HashAnalyzeStatus.ERROR,
      };
    }

    // document.querySelector('vt-ui-shell file-view').shadowRoot.querySelector('#report').shadowRoot.querySelector('vt-ui-detections-widget').shadowRoot.querySelector('.circle .positives')
    const rawPositives = await page.locator(".circle .positives").innerText();
    const rawTotal = await page.locator(".circle .total").innerText();
    const positives = parseInt(rawPositives.replace(INT_REGEX, "").trim());
    const total = parseInt(rawTotal.replace(INT_REGEX, "").trim());

    if (isNaN(positives) || isNaN(total)) {
      return {
        hash,
        positives: -1,
        total: -1,
        status: HashAnalyzeStatus.ERROR,
      };
    }

    return {
      hash,
      positives,
      total,
      status: positives > 0 ? HashAnalyzeStatus.MALICIOUS : HashAnalyzeStatus.NOT_MALICIOUS,
    };
  }

  public async dispose(): Promise<void> {
    const context = await this.getContext();
    await context.close();
    const browser = await this.getBrowser();
    await browser.close();
    this.context = null;
    VirusTotalScrapAnalyzerService.__browser = null;
  }
}
