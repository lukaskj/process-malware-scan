import { IExecutable } from "@domain/interfaces/executable.interface";
import { HashStatus } from "@domain/interfaces/hash-status.interface";
import { HashAnalyzeStatus } from "@domain/interfaces/output-executable-status.interface";
import { OutputJson } from "@domain/interfaces/output-json.interface";
import { mkdir, readFile, writeFile } from "fs/promises";
import { dirname } from "path";
import { Service } from "typedi";
import { isNullOrUndefined } from "../utils/is-null-or-undefined";

@Service()
export class ExternalFileService {
  public async saveResultsToJson(
    executableList: IExecutable[],
    resultsFilePath: string,
    inputFile?: OutputJson,
  ): Promise<OutputJson> {
    const output: OutputJson = {
      all: executableList,
      allHashes: inputFile?.allHashes ?? {},
      status: inputFile?.status ?? {},
    };

    for (const i of executableList) {
      if (i.error) {
        continue;
      }

      // All hahes
      if (isNullOrUndefined(output.allHashes[i.hash])) {
        output.allHashes[i.hash] = i;
      }

      // Status
      if (isNullOrUndefined(output.status[i.hash])) {
        output.status[i.hash] = {
          hash: i.hash,
          positives: -1,
          total: -1,
          status: HashAnalyzeStatus.WAITING,
        };
      }
    }

    await mkdir(dirname(resultsFilePath), { recursive: true });
    await writeFile(resultsFilePath, JSON.stringify(output));

    return output;
  }

  public async loadOutputFile(path?: string): Promise<OutputJson | undefined> {
    if (isNullOrUndefined(path)) {
      return;
    }

    try {
      const fileBuffer = await readFile(path);
      const jsonContents = JSON.parse(fileBuffer.toString());
      if (
        jsonContents &&
        typeof jsonContents === "object" &&
        "all" in jsonContents &&
        Array.isArray(jsonContents.all) &&
        "allHashes" in jsonContents &&
        typeof jsonContents.allHashes === "object" &&
        "status" in jsonContents &&
        typeof jsonContents.status === "object"
      ) {
        console.log(`[*] Results file found at '${path}'. Loading...`);
        return jsonContents as OutputJson;
      }
    } catch (error) {
      // console.error(error);
    }

    return;
  }

  public async saveCacheFile(cachePath: string, contents: HashStatus): Promise<void> {
    if (isNullOrUndefined(cachePath)) {
      return;
    }
    await writeFile(cachePath, JSON.stringify(contents));
  }
  public async loadCacheFile(cacheFileLocation: string): Promise<HashStatus> {
    if (isNullOrUndefined(cacheFileLocation)) {
      return {};
    }

    try {
      const fileBuffer = await readFile(cacheFileLocation);
      const contents = JSON.parse(fileBuffer.toString());
      if (contents && typeof contents === "object") {
        return contents as HashStatus;
      }
    } catch (error) {
      // console.error(error);
      console.log("Creating cashe file...");
    }
    return {};
  }
}
