import { Service } from "typedi";
import yargs from "yargs";
import { hideBin } from "yargs/helpers";
import { TOptions } from "./types";

const DEFAULT_RESULTS_FILE = "output/results.json";
const DEFAULT_CACHE_FILE = "hashcash.json";

@Service()
export class OptsService {
  public opts: TOptions;

  constructor() {
    this.opts = {
      inputFile: DEFAULT_RESULTS_FILE,
      cacheFile: DEFAULT_CACHE_FILE,
      resultsFilePath: DEFAULT_RESULTS_FILE,
      scanners: {
        process: true,
        task: true,
        service: true,
      },
      debug: false,
    };
  }

  public async handleArgs(): Promise<TOptions> {
    const argv = await yargs(hideBin(process.argv))
      .option("process", {
        alias: "p",
        type: "boolean",
        description: "Scan running processes",
      })
      .option("service", {
        alias: "s",
        type: "boolean",
        description: "Scan services",
      })
      .option("task", {
        alias: "t",
        type: "boolean",
        description: "Scan scheduled tasks",
      })
      .option("results", {
        alias: "r",
        type: "string",
        description: "Results file. It will save results or load previous results if existing.",
        default: DEFAULT_RESULTS_FILE,
      })
      .option("cacheFile", {
        alias: "c",
        type: "string",
        description: "Cache file location",
        default: DEFAULT_CACHE_FILE,
      })
      .option("debug", {
        type: "boolean",
        description: "Debug",
        default: false,
      }).argv;

    const result: TOptions = {
      inputFile: argv._.length ? String(argv._.at(0)) : argv.results,
      scanners: {
        process: argv.process || false,
        task: argv.task || false,
        service: argv.service || false,
      },
      resultsFilePath: argv.results ?? DEFAULT_RESULTS_FILE,
      cacheFile: argv.cacheFile,
      debug: argv.debug,
    };

    if (!Object.values(result.scanners).includes(true)) {
      for (const k in result.scanners) {
        result.scanners[k as keyof typeof result.scanners] = true;
      }
    }

    this.opts = result;

    return result;
  }
}
