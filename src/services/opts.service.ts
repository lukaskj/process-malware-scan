import { Service } from "typedi";
import yargs from "yargs";
import { hideBin } from "yargs/helpers";
import { TOptions } from "./types";

const DEFAULT_OUTPUT_DIR = "output";

@Service()
export class OptsService {
  public async get(): Promise<TOptions> {
    const argv = await yargs(hideBin(process.argv))
      // .option("all", {
      //   alias: "a",
      //   type: "boolean",
      //   description: "Run all",
      //   default: true,
      // })
      .option("process", {
        alias: "p",
        type: "boolean",
        description: "Scan running processes",
      })
      .option("service", {
        alias: "s",
        type: "boolean",
        description: "Scan services",
      })
      .option("task", {
        alias: "t",
        type: "boolean",
        description: "Scan scheduled tasks",
      })
      .option("output", {
        alias: "o",
        type: "string",
        description: "Output directory",
      }).argv;

    const result: TOptions = {
      scanners: {
        process: argv.process || false,
        task: argv.task || false,
        service: argv.service || false,
      },
      outputDir: argv.output ?? DEFAULT_OUTPUT_DIR,
    };

    if (!Object.values(result.scanners).includes(true)) {
      for (const k in result.scanners) {
        result.scanners[k as keyof typeof result.scanners] = true;
      }
    }

    return result;
  }
}
