import { Service } from "typedi";
import { IExecutable } from "../../contracts/executable.interface";
import { IScrapper } from "./scrapper.interface";
import { Powershell } from "../../utils/powershell";
import { SERVICE_STATUS, ServiceStatus } from "../../enum/service-status.enum";
import { isNullOrEmptyOrUndefined } from "../../utils/is-null-or-undefined";
import { getPathAndArgs } from "../../utils/get-path-and-args";
import { Executable } from "../../entities/executable.entity";
import { ServiceExecutable } from "../../entities/service-executable.entity";

type ServiceInfoLine = {
  status: ServiceStatus;
  path: string;
  name: string;
  args: string;
};

@Service()
export class ServiceScrapper implements IScrapper {
  public name: string = "Services";

  constructor(private shell: Powershell) {}

  public async listExecutables(): Promise<IExecutable[]> {
    const output = await this.shell.run(['"Get-WmiObject win32_service | select DisplayName, State, PathName"']);
    const executables: Executable[] = [];

    const outputArr = output.split("\n");
    for (const line of outputArr) {
      const lineInfo = await this.getServiceInfoFromLine(line);
      if (!lineInfo) {
        continue;
      }
      executables.push(
        new ServiceExecutable({
          ...lineInfo,
        }),
      );
    }

    return executables;
  }

  private async getServiceInfoFromLine(line: string): Promise<ServiceInfoLine | null> {
    let status: ServiceStatus | null = null;
    for (const s of SERVICE_STATUS) {
      if (line.indexOf(s) >= 0) {
        status = s;
        break;
      }
    }

    if (isNullOrEmptyOrUndefined(status)) {
      return null;
    }

    const lineArray = line.split(status);
    const name = lineArray[0]?.trim();
    let rawPath = lineArray[1]?.trim();

    // if the service command output is trimmed with ellipsis get only its path
    if (rawPath?.endsWith("...")) {
      rawPath = await this.getServicePathFromUnfinishedDetailName(name);
    }

    const pathAndArgs = getPathAndArgs(rawPath);

    return {
      name,
      path: pathAndArgs.path,
      args: pathAndArgs.args,
      status,
    };
  }

  private async getServicePathFromUnfinishedDetailName(detailName: string): Promise<string> {
    const output = await this.shell.run([
      `"Get-WmiObject win32_service | ?{$_.DisplayName -like '*${detailName}*'} | select PathName | fl"`,
    ]);

    const pathNameStr = "PathName : ";

    let fullPath = "";
    const outputArr = output.split("\n");
    let pathNameStrFound = false;

    for (const line of outputArr) {
      if (line.indexOf(pathNameStr) >= 0) {
        if (pathNameStrFound) {
          break;
        }
        pathNameStrFound = true;
      }
      fullPath += ` ${line.trim()}`;
    }

    return fullPath.replaceAll(pathNameStr, "").trim();
  }
}
