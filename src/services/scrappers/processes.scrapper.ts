import { basename } from "node:path";
import { Inject, Service } from "typedi";
import { IExecutable } from "../../contracts/executable.interface";
import { Executable } from "../../entities/executable.entity";
import { Powershell } from "../../utils/powershell";
import { IScrapper } from "./scrapper.interface";
import { ExecutableSource } from "../../enum/executable-source.enum";

@Service()
export class ProcessesScrapper implements IScrapper {
  public name: string = "Running processes";
  public optionName: string = "process";
  public source = ExecutableSource.PROCESS;

  constructor(@Inject() private shell: Powershell) {}

  public async listExecutables(): Promise<IExecutable[]> {
    console.log("Listing processes...");
    // const command = "WMIC PROCESS get ExecutablePath";
    const output = await this.shell.run(["WMIC", "PROCESS", "get", "ExecutablePath"]);
    const outputArr = output.split("\n");
    const executables = new Set<IExecutable>();

    for (let i = 0; i < outputArr.length; i++) {
      const line = outputArr[i];
      const filePath = line.trim();
      if (!filePath.length || filePath === "ExecutablePath") {
        continue;
      }

      const processBaseName = basename(filePath);

      executables.add(new Executable(processBaseName, filePath, ExecutableSource.PROCESS));
    }

    return Array.from(executables);
  }
}
