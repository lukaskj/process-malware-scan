import { basename } from "node:path";
import { Inject, Service } from "typedi";
import { IExecutable } from "../../contracts/executable.interface";
import { Executable } from "../../entities/executable.entity";
import { Powershell } from "../../utils/powershell";
import { IScrapper } from "./scrapper.interface";

@Service()
export class ProcessesScrapper implements IScrapper {
  public name: string = "Running processes";

  constructor(@Inject() private shell: Powershell) {}

  public async listExecutables(): Promise<IExecutable[]> {
    // const command = "WMIC PROCESS get ExecutablePath";
    const output = await this.shell.run(["WMIC", "PROCESS", "get", "ExecutablePath"]);
    const outputArr = output.split("\n");
    const executables = new Set<IExecutable>();

    for (const rLine of outputArr) {
      const filePath = rLine.trim();
      if (!filePath.length || filePath === "ExecutablePath") {
        continue;
      }

      const processBaseName = basename(filePath);

      executables.add(new Executable(processBaseName, filePath));
    }

    return Array.from(executables);
  }
}
