import { mkdir, writeFile } from "fs/promises";
import { join } from "path";
import { Service } from "typedi";
import { IExecutable } from "../contracts/executable.interface";
import { OutputJson, TOptions } from "../services/types";
import { isNullOrUndefined } from "../utils/is-null-or-undefined";

@Service()
export class ExecutableOutputService {
  public async saveExecutablesToJson(executableList: IExecutable[], _opts: TOptions): Promise<void> {
    const output: OutputJson = {
      all: [],
      allHashes: {},
      status: {},
    };
    output.all = executableList;

    for (const i of executableList) {
      if (i.error) {
        continue;
      }

      // All hahes
      if (isNullOrUndefined(output.allHashes[i.hash])) {
        output.allHashes[i.hash] = [];
      }
      output.allHashes[i.hash]?.push(i);

      // Status
      if (isNullOrUndefined(output.status[i.hash])) {
        output.status[i.hash] = {};
      }
    }

    await mkdir(_opts.outputDir, { recursive: true });
    await writeFile(join(_opts.outputDir, "output.json"), JSON.stringify(output));
  }
}
